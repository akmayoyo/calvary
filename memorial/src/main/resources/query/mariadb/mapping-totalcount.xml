<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="totalcount">

	<!-- 
	페이징쿼리에서 전체 행수 조회를 위한 쿼리 정의
	SQL_CALC_FOUND_ROWS+FOUND_ROWS 로 가져오던게 갑자기 안돼서 원인을 못찾아 일단 행수 조회를 위한 쿼리를 메인쿼리와 쌍으로 정의함  
	-->
	
	<!-- 사용계약리스트 조회 -->
    <select id="getContractList" parameterType="map" resultType="map">
    	SELECT
    		COUNT(1) as total_count 
    	FROM
		    (SELECT
			  a.bunyang_seq
			  ,a.bunyang_no
			  ,a.bunyang_times
			  ,a.product_type
			  ,a.cancel_yn
			  ,(SELECT code_name FROM TB_COM_CODE cc WHERE cc.code_seq = a.product_type AND cc.parent_code_seq = 'PRODUCT_TYPE') product_type_name
			  ,a.couple_type_count
			  ,a.single_type_count
			  ,a.service_charge_type
			  ,(SELECT code_name FROM TB_COM_CODE cc WHERE cc.code_seq = a.service_charge_type AND cc.parent_code_seq = 'SERVICE_CHARGE_TYPE') service_charge_type_name
			  ,a.progress_status
			  ,b.user_id apply_user_id
			  ,b.user_name apply_user_name
			  ,b.relation_type apply_user_relation
			  ,c.user_id agent_user_id
			  ,c.user_name agent_user_name
			  ,c.relation_type agent_user_relation
			  ,(SELECT code_name FROM TB_COM_CODE cc WHERE cc.code_seq = c.relation_type AND cc.parent_code_seq = 'USER_RELATION') agent_user_relation_name
			  ,d.user_id use_user_id
			  ,d.user_name use_user_name
			  ,d.relation_type use_user_relation
			  ,(SELECT code_name FROM TB_COM_CODE cc WHERE cc.code_seq = d.relation_type AND cc.parent_code_seq = 'USER_RELATION') use_user_relation_name
			  ,d.cnt use_user_cnt
			  ,a.regist_user_id
			  ,(SELECT user_name FROM TB_COM_USER cu WHERE cu.user_id = a.regist_user_id) regist_user_name
		      ,DATE_FORMAT(a.regist_date, '%Y-%m-%d') AS regist_date
		      ,(COALESCE(a.couple_type_count,0)*2 + COALESCE(a.single_type_count,0)) * COALESCE((select code_value from TB_COM_CODE where parent_code_seq = 'BUNYANG_TIMES' and code_seq = a.bunyang_times), a.price_per_count) AS total_price
			  ,(SELECT COALESCE(SUM(payment_amount),0) FROM TB_BUNYANG_PAYMENT_HISTORY ph WHERE ph.bunyang_seq = a.bunyang_seq AND ph.payment_type = 'DOWN_PAYMENT') AS down_payment
              ,(SELECT COALESCE(SUM(payment_amount),0) FROM TB_BUNYANG_PAYMENT_HISTORY ph WHERE ph.bunyang_seq = a.bunyang_seq AND ph.payment_type = 'BALANCE_PAYMENT') AS balance_payment
              ,(SELECT DATE_FORMAT(update_date, '%Y-%m-%d') FROM TB_BUNYANG_HISTORY tbh WHERE tbh.bunyang_seq = a.bunyang_seq and tbh.progress_status = 'A') approval_date
              ,(SELECT DATE_FORMAT(update_date, '%Y-%m-%d') FROM TB_BUNYANG_HISTORY tbh WHERE tbh.bunyang_seq = a.bunyang_seq and tbh.progress_status = 'B') contract_date
              ,(SELECT DATE_FORMAT(update_date, '%Y-%m-%d') FROM TB_BUNYANG_HISTORY tbh WHERE tbh.bunyang_seq = a.bunyang_seq and tbh.progress_status = 'C') fullpayment_date
              ,(SELECT DATE_FORMAT(update_date, '%Y-%m-%d') FROM TB_BUNYANG_HISTORY tbh WHERE tbh.bunyang_seq = a.bunyang_seq and tbh.progress_status = 'E') cancel_date
              ,(SELECT DATE_FORMAT(MAX(payment_date), '%Y-%m-%d') FROM TB_BUNYANG_PAYMENT_HISTORY ph WHERE ph.bunyang_seq = a.bunyang_seq AND ph.payment_type = 'DOWN_PAYMENT') AS down_payment_date
			FROM TB_BUNYANG_INFO a INNER JOIN       
			(SELECT
				bunyang_seq
			  	,user_id
				,CASE WHEN user_id IS NULL THEN user_name ELSE (SELECT user_name FROM TB_COM_USER b WHERE a.user_id = b.user_id) END user_name
			  	,ref_type
				,relation_type
			FROM TB_BUNYANG_REF_USER a
			WHERE ref_type = 'APPLY_USER'
			) b ON a.bunyang_seq = b.bunyang_seq  
			LEFT OUTER JOIN
			(SELECT
				bunyang_seq
			  	,user_id
				,CASE WHEN user_id IS NULL THEN user_name ELSE (SELECT user_name FROM TB_COM_USER b WHERE a.user_id = b.user_id) END user_name
			  	,ref_type
				,relation_type
			FROM TB_BUNYANG_REF_USER a
			WHERE ref_type = 'AGENT_USER'
			) c ON a.bunyang_seq = c.bunyang_seq
			INNER JOIN
			(SELECT
				*
				,(SELECT COUNT(*) FROM TB_BUNYANG_REF_USER RU WHERE RU.bunyang_seq = t.bunyang_seq and RU.ref_type = 'USE_USER') cnt
			FROM
				(SELECT
					bunyang_seq
				  	,user_id
					,user_name
					,relation_type
					,CASE WHEN @vbunyang_seq = a.bunyang_seq THEN @rownum:=@rownum+1 ELSE @rownum:=1 END rn
                    ,(@vbunyang_seq := a.bunyang_seq) vbunyang_seq
				FROM      
					(SELECT 
						 bunyang_seq
					   	,user_id
					   	,CASE WHEN user_id IS NULL THEN user_name ELSE (SELECT user_name FROM TB_COM_USER b WHERE a.user_id = b.user_id) END user_name
					   	,relation_type 
					FROM TB_BUNYANG_REF_USER a
					WHERE a.ref_type = 'USE_USER'
					) a, (SELECT @vbunyang_seq:='', @rownum:=0 FROM DUAL) b
				ORDER BY bunyang_seq, CASE WHEN relation_type = 'ONESELF' THEN 1 ELSE 2 end, user_name
			  ) t
			  WHERE rn = 1
			) d ON a.bunyang_seq = d.bunyang_seq
			WHERE a.progress_status in ('A', 'B', 'C', 'E')
			) t
		WHERE (cancel_yn is null or cancel_yn != 'Y')
		<if test="apply_user_name != null and apply_user_name != ''">
		AND apply_user_name like CONCAT('%',#{apply_user_name},'%')
		</if>
		<if test='progressStatus == "A"'>
		AND progress_status = 'A'
		</if>
		<if test='progressStatus == "B"'>
		AND progress_status = 'B'
		</if>
		<if test='progressStatus == "C"'>
		AND progress_status = 'C'
		</if>
		<if test='progressStatus == "E"'>
		AND progress_status = 'E'
		</if>
		<if test='progressStatus == "B0"'>
		<![CDATA[
		AND progress_status = 'A' AND down_payment >= (total_price / 10)
		]]>
		</if>
		<if test="bunyangTimes != null and bunyangTimes > 0">
		AND bunyang_times = #{bunyangTimes}
		</if>
    </select>
	
	<!-- 납부내역조회  -->	
	<select id="getPaymentList" parameterType="map" resultType="map">
		SELECT
			COUNT(1) as total_count 
		FROM
		(SELECT
			a.bunyang_seq
		FROM TB_BUNYANG_PAYMENT_HISTORY a LEFT OUTER JOIN TB_BUNYANG_INFO b ON a.bunyang_seq = b.bunyang_seq
		WHERE 1=1
		<if test="bunyangNo != null and bunyangNo != ''">
		AND b.bunyang_no = #{bunyangNo}
		</if>
		<if test="paymentType != null and paymentType != ''">
		AND a.payment_type = #{paymentType}
		</if>
		<if test="paymentDivision != null and paymentDivision != ''">
		AND a.payment_division = #{paymentDivision}
		</if>
		<if test="fromDt != null and fromDt != ''">
		<![CDATA[
		AND payment_date >= STR_TO_DATE(#{fromDt}, '%Y%m%d')
		]]>
		</if>
		<if test="toDt != null and toDt != ''">
		<![CDATA[
		AND payment_date < DATE_ADD(STR_TO_DATE(#{toDt}, '%Y%m%d'), INTERVAL 1 DAY)
		]]>
		</if>
		) t
	</select>
	
</mapper>