<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="use">

    <!-- 추모동산 사용현황 리스트 조회 -->
    <select id="getGraveUseList" parameterType="map" resultType="map">
    	SELECT
			section_seq
		    ,row_seq
		    ,col_seq
		    ,grave_type
		    ,group_seq
		    ,bunyang_seq
		    ,use_user_seq1
		    ,use_user_seq2
		    ,couple_seq
		    ,seq_no
		    ,assign_status
		    ,(SELECT connect_product_type FROM vw_bunyang_connect_info t where t.bunyang_seq = a.bunyang_seq) as connect_product_type
		    ,(SELECT MAX(col_seq) FROM TB_BUNYANG_GRAVE_ASSIGN t WHERE a.section_seq = t.SECTION_SEQ) max_col_cnt
		    ,(SELECT MIN(col_seq) FROM TB_BUNYANG_GRAVE_ASSIGN t WHERE a.section_seq = t.SECTION_SEQ AND a.row_seq = t.row_seq) min_col_seq
		FROM TB_BUNYANG_GRAVE_ASSIGN a
		ORDER BY section_seq, row_seq desc, col_seq
    </select>
    
    <!-- 특정 구역에 배정된 정보 조회 -->
    <select id="getGraveAssignInfo" parameterType="map" resultType="map">
    	SELECT
	  		b.bunyang_seq
	  		,a.group_seq
	  		,b.bunyang_no
			,a.section_seq
		    ,a.row_seq
		    ,a.col_seq
		    ,a.seq_no
		    ,a.grave_type
            ,a.assign_status
            ,a.use_user_seq1
            ,a.use_user_seq2
            ,a.couple_seq
            ,COALESCE(c.user_name, (SELECT user_name FROM TB_COM_USER cu WHERE cu.user_id = c.user_id)) AS apply_user_name
		    ,d.user_seq
            ,d.user_id
            ,d.relation_type
            ,(SELECT code_name FROM TB_COM_RELATION_CODE cc WHERE cc.code_seq = d.relation_type) relation_type_name
            ,COALESCE(d.user_name, e.user_name) AS user_name
		    ,COALESCE(d.birth_date, e.birth_date) AS birth_date
		    ,COALESCE(d.gender, e.gender) AS gender
		    ,COALESCE(d.email, e.email) AS email
		    ,COALESCE(d.mobile, e.mobile) AS mobile
		    ,COALESCE(d.phone, e.phone) AS phone
		    ,COALESCE(d.post_number, e.post_number) AS post_number
		    ,COALESCE(d.address1, e.address1) AS address1
		    ,COALESCE(d.address2, e.address2) AS address2
		    ,CASE 
		    	WHEN a.use_user_seq1 = d.user_seq then DATE_FORMAT(a.assign_date1, '%Y-%m-%d')
		    	WHEN a.use_user_seq2 = d.user_seq then DATE_FORMAT(a.assign_date2, '%Y-%m-%d')
		    END assign_date
		FROM TB_BUNYANG_GRAVE_ASSIGN a 
		LEFT OUTER JOIN TB_BUNYANG_INFO b ON a.bunyang_seq = b.bunyang_seq
		LEFT OUTER JOIN TB_BUNYANG_REF_USER c ON a.bunyang_seq = c.bunyang_seq AND c.ref_type = 'APPLY_USER'
		LEFT OUTER JOIN TB_BUNYANG_REF_USER d ON d.ref_type = 'USE_USER' and a.bunyang_seq = d.bunyang_seq and (a.use_user_seq1 = d.user_seq or a.use_user_seq2 = d.user_seq)
        LEFT OUTER JOIN TB_COM_USER e ON d.user_id = e.user_id
		WHERE a.section_seq = #{sectionSeq}
		AND a.row_seq = #{rowSeq}
		AND a.col_seq = #{colSeq}
		ORDER BY section_seq, row_seq, col_seq
    </select>
    
    <!-- 특정 구역에 배정된 정보 조회 -->
    <select id="getGraveAssignInfoBySeqNo" parameterType="map" resultType="map">
    	SELECT
	  		a.section_seq
		    ,a.row_seq
		    ,a.col_seq
		    ,a.seq_no
		    ,a.grave_type
            ,a.assign_status
		FROM TB_BUNYANG_GRAVE_ASSIGN a 
		WHERE a.section_seq = #{sectionSeq} and a.seq_no = #{seqNo}
    </select>
    
    <!-- 가족형으로 묶인 모든 배정 정보 조회 -->
    <select id="getGraveAssignInfoByFamily" parameterType="map" resultType="map">
    	SELECT
	  		a.bunyang_seq
	  		,a.group_seq
	  		,b.bunyang_no
			,a.section_seq
		    ,a.row_seq
		    ,a.col_seq
		    ,a.seq_no
		    ,a.grave_type
            ,a.assign_status
            ,COALESCE(c.user_name, (SELECT user_name FROM TB_COM_USER cu WHERE cu.user_id = c.user_id)) AS apply_user_name
		    ,d.user_seq
            ,d.user_id
            ,d.relation_type
            ,(SELECT code_name FROM TB_COM_RELATION_CODE cc WHERE cc.code_seq = d.relation_type) relation_type_name
            ,COALESCE(d.user_name, e.user_name) AS user_name
		    ,COALESCE(d.birth_date, e.birth_date) AS birth_date
		    ,COALESCE(d.gender, e.gender) AS gender
		    ,COALESCE(d.email, e.email) AS email
		    ,COALESCE(d.mobile, e.mobile) AS mobile
		    ,COALESCE(d.phone, e.phone) AS phone
		    ,COALESCE(d.post_number, e.post_number) AS post_number
		    ,COALESCE(d.address1, e.address1) AS address1
		    ,COALESCE(d.address2, e.address2) AS address2
		    ,CASE 
		    	WHEN a.use_user_seq1 = d.user_seq then DATE_FORMAT(a.assign_date1, '%Y-%m-%d')
		    	WHEN a.use_user_seq2 = d.user_seq then DATE_FORMAT(a.assign_date2, '%Y-%m-%d')
		    END assign_date
		FROM TB_BUNYANG_GRAVE_ASSIGN a 
		LEFT OUTER JOIN TB_BUNYANG_INFO b ON a.bunyang_seq = b.bunyang_seq
		LEFT OUTER JOIN TB_BUNYANG_REF_USER c ON a.bunyang_seq = c.bunyang_seq AND c.ref_type = 'APPLY_USER'
		LEFT OUTER JOIN TB_BUNYANG_REF_USER d ON d.ref_type = 'USE_USER' and a.bunyang_seq = d.bunyang_seq and (a.use_user_seq1 = d.user_seq or a.use_user_seq2 = d.user_seq)
        LEFT OUTER JOIN TB_COM_USER e ON d.user_id = e.user_id
		WHERE 1=1
		<if test="group_seq != null and group_seq != ''">
		AND a.group_seq = #{group_seq}
		</if>
		<if test="bunyang_seq != null and bunyang_seq != ''">
		AND a.bunyang_seq = #{bunyang_seq}
		</if>
		<if test="sectionSeq != null and sectionSeq != ''">
		AND a.section_seq = #{sectionSeq}
		AND a.row_seq = #{rowSeq}
		AND a.col_seq = #{colSeq}
		</if>
		ORDER BY b.bunyang_no, d.user_seq
    </select>
    
    <!-- 동산 사용신청 리스트 조회 -->
    <select id="getUseApplyList" parameterType="map" resultType="map">
    	SELECT
    		SQL_CALC_FOUND_ROWS
    		t.*
    		,CASE 
        		WHEN use_user_cnt > 1 THEN CONCAT(use_user_name,'(',use_user_relation_name,')',' 외 ',use_user_cnt-1,'명')
          		ELSE  CONCAT(use_user_name,'(',use_user_relation_name,')')
        	END use_user_exp
    	FROM
		    (SELECT
			  a.bunyang_seq
			  ,a.bunyang_no
			  ,a.product_type
			  ,(SELECT code_name FROM TB_COM_CODE cc WHERE cc.code_seq = a.product_type AND cc.parent_code_seq = 'PRODUCT_TYPE') product_type_name
			  ,a.couple_type_count
			  ,a.single_type_count
			  ,a.service_charge_type
			  ,(SELECT code_name FROM TB_COM_CODE cc WHERE cc.code_seq = a.service_charge_type AND cc.parent_code_seq = 'SERVICE_CHARGE_TYPE') service_charge_type_name
			  ,a.progress_status
			  ,b.user_id apply_user_id
			  ,b.user_name apply_user_name
			  ,b.relation_type apply_user_relation
			  ,c.user_id agent_user_id
			  ,c.user_name agent_user_name
			  ,c.relation_type agent_user_relation
			  ,(SELECT code_name FROM TB_COM_RELATION_CODE cc WHERE cc.code_seq = c.relation_type) agent_user_relation_name
			  ,d.user_id use_user_id
			  ,d.user_name use_user_name
			  ,d.relation_type use_user_relation
			  ,(SELECT code_name FROM TB_COM_RELATION_CODE cc WHERE cc.code_seq = d.relation_type) use_user_relation_name
			  ,d.cnt use_user_cnt
			  ,a.regist_user_id
			  ,(SELECT user_name FROM TB_COM_USER cu WHERE cu.user_id = a.regist_user_id) regist_user_name
		      ,DATE_FORMAT(a.regist_date, '%Y-%m-%d') AS regist_date
		      ,(COALESCE(a.couple_type_count,0)*2 + COALESCE(a.single_type_count,0)) * COALESCE((select code_value from TB_COM_CODE where parent_code_seq = 'BUNYANG_TIMES' and code_seq = a.bunyang_times), a.price_per_count) AS total_price
			  ,CASE WHEN progress_status = 'D' THEN 'Y' ELSE 'N' END AS approval_yn
			  ,(SELECT DATE_FORMAT(update_date, '%Y-%m-%d') FROM TB_BUNYANG_HISTORY bh WHERE bh.bunyang_seq = a.bunyang_seq and bh.progress_status = 'B' order by bh.update_date desc limit 1) contract_date
			  ,(SELECT DATE_FORMAT(update_date, '%Y-%m-%d') FROM TB_BUNYANG_HISTORY bh WHERE bh.bunyang_seq = a.bunyang_seq and bh.progress_status = 'C' order by bh.update_date desc limit 1) full_payment_date
			  ,(SELECT DATE_FORMAT(update_date, '%Y-%m-%d') FROM TB_BUNYANG_HISTORY bh WHERE bh.bunyang_seq = a.bunyang_seq and bh.progress_status = 'D' order by bh.update_date desc limit 1) use_approval_date
			FROM TB_BUNYANG_INFO a INNER JOIN       
			(SELECT
				bunyang_seq
			  	,user_id
				,user_name
			  	,ref_type
				,relation_type
			FROM TB_BUNYANG_REF_USER a
			WHERE ref_type = 'APPLY_USER'
			) b ON a.bunyang_seq = b.bunyang_seq  
			LEFT OUTER JOIN
			(SELECT
				bunyang_seq
			  	,user_id
				,user_name
			  	,ref_type
				,relation_type
			FROM TB_BUNYANG_REF_USER a
			WHERE ref_type = 'AGENT_USER'
			) c ON a.bunyang_seq = c.bunyang_seq
			INNER JOIN
			(SELECT
				*
				,(SELECT COUNT(*) FROM TB_BUNYANG_REF_USER RU WHERE RU.bunyang_seq = t.bunyang_seq and RU.ref_type = 'USE_USER') cnt
			FROM
				(SELECT
					bunyang_seq
				  	,user_id
					,user_name
					,relation_type
					,CASE WHEN @vbunyang_seq = a.bunyang_seq THEN @rownum:=@rownum+1 ELSE @rownum:=1 END rn
                    ,(@vbunyang_seq := a.bunyang_seq) vbunyang_seq
				FROM      
					(SELECT 
						 bunyang_seq
					   	,user_id
					   	,user_name
					   	,relation_type 
					FROM TB_BUNYANG_REF_USER a
					WHERE a.ref_type = 'USE_USER'
					) a, (SELECT @vbunyang_seq:='', @rownum:=0 FROM DUAL) b
				ORDER BY bunyang_seq, CASE WHEN relation_type = 'ONESELF' THEN 1 ELSE 2 end, user_name
			  ) t
			  WHERE rn = 1
			) d ON a.bunyang_seq = d.bunyang_seq
			WHERE a.progress_status in ('D')
			) t
		WHERE 1=1
		<if test="apply_user_name != null">
		AND apply_user_name like CONCAT('%',#{apply_user_name},'%')
		</if>
		ORDER BY t.bunyang_seq
		<if test="start != null">
		LIMIT #{start}, #{count}
		</if>
    </select>
    
    <!-- 사용자리스트 조회 -->
    <select id="getUseUserList" parameterType="map" resultType="map">
    	SELECT 
			 a.bunyang_seq
		   	,a.user_id
		   	,COALESCE(a.user_name, b.user_name) AS user_name
		   	,COALESCE(a.birth_date, b.birth_date) AS birth_date
		   	,COALESCE(a.mobile, b.mobile) AS mobile
		   	,COALESCE(a.post_number, b.post_number) AS post_number
		   	,COALESCE(a.address1, b.address1) AS address1
		   	,COALESCE(a.address2, b.address2) AS address2
		   	,relation_type
		   	,(SELECT code_name FROM TB_COM_RELATION_CODE t WHERE t.code_seq = a.relation_type) as relation_type_name
		   	,(SELECT COUNT(1) FROM TB_BUNYANG_GRAVE_ASSIGN t WHERE t.bunyang_seq = a.bunyang_seq AND (t.use_user_seq1 = a.user_seq or t.use_user_seq2 = a.user_seq)) assign_yn
		   	,a.user_seq
		   	,a.couple_seq
		FROM TB_BUNYANG_REF_USER a LEFT OUTER JOIN TB_COM_USER b ON a.user_id = b.user_id
		WHERE a.ref_type = 'USE_USER'
		AND a.bunyang_seq = #{bunyangSeq}
		ORDER BY a.user_seq
    </select>
    
    <!-- 사용가능한 동산 정보 조회 -->
    <select id="getAvailableGraveInfo" parameterType="map" resultType="map">
    	SELECT
			section_seq
			,row_seq
			,col_seq
		FROM
		(SELECT
			section_seq
			,row_seq
			,min(col_seq) col_seq
			,count(1) cnt
		from
		(select 
			section_seq
		    ,row_seq
		    ,col_seq
		    ,CASE WHEN @v_group = concat(a.section_seq, a.row_seq) THEN @rownum:=@rownum+1 ELSE @rownum:=1 END rn
			,(@v_group := concat(a.section_seq, a.row_seq)) v_group
		from TB_BUNYANG_GRAVE_ASSIGN a, (SELECT @v_group:='', @rownum:=0 FROM DUAL) b
		where grave_type = #{graveType} AND assign_status = 'AVAILABLE'
		order by a.section_seq, a.row_seq, a.col_seq
		) t
		group by section_seq, row_seq, (col_seq - rn)
		) t
		where cnt >= #{cnt}
		order by section_seq, row_seq, t.col_seq
		LIMIT 1
    </select>
    
    <!-- 사용가능한 동산 정보 조회 -->
    <select id="getAvailableSectionGraveInfo" parameterType="map" resultType="map">
    	SELECT
			section_seq
			,row_seq
			,col_seq
		FROM
		(SELECT
			section_seq
			,row_seq
			,min(col_seq) col_seq
			,count(1) cnt
		from
		(select 
			section_seq
		    ,row_seq
		    ,col_seq
		    ,CASE WHEN @v_group = concat(a.section_seq, a.row_seq) THEN @rownum:=@rownum+1 ELSE @rownum:=1 END rn
			,(@v_group := concat(a.section_seq, a.row_seq)) v_group
		from TB_BUNYANG_GRAVE_ASSIGN a, (SELECT @v_group:='', @rownum:=0 FROM DUAL) b
		where section_seq = #{sectionSeq} AND grave_type = #{graveType} AND assign_status = 'AVAILABLE'
		order by a.section_seq, a.row_seq, a.col_seq
		) t
		group by section_seq, row_seq, (col_seq - rn)
		) t
		where cnt >= #{cnt}
		order by section_seq, row_seq, t.col_seq
		LIMIT 1
    </select>
    
    <!-- 사용가능한 동산 정보 조회(모든구역별로) -->
    <select id="getAvailableGraveInfoAll" parameterType="map" resultType="map">
    	select
			t.section_seq
			,t.row_seq
			,t.col_seq
			,(select seq_no from TB_BUNYANG_GRAVE_ASSIGN ga where ga.section_seq = t.section_seq and ga.row_seq = t.row_seq and ga.col_seq = t.col_seq) seq_no
		from
			(SELECT
				a.*
				,CASE WHEN @vsection_seq2 = a.section_seq THEN @rownum2:=@rownum2+1 ELSE @rownum2:=1 END rn
				,(@vsection_seq2 := a.section_seq) vsection_seq
			from
				(SELECT
					section_seq, row_seq, col_seq
				FROM
					(SELECT
						section_seq
						,row_seq
						,min(col_seq) col_seq
						,count(1) cnt
					from
						(select 
							section_seq
						    ,row_seq
						    ,col_seq
						    ,CASE WHEN @vgroup = concat(a.section_seq, a.row_seq) THEN @rownum:=@rownum+1 ELSE @rownum:=1 END rn
							,(@vgroup := concat(a.section_seq, a.row_seq)) vgroup
						from TB_BUNYANG_GRAVE_ASSIGN a, (SELECT @vgroup:='', @rownum:=0 FROM DUAL) b
						where grave_type = #{graveType} AND assign_status = 'AVAILABLE'
						order by a.section_seq, a.row_seq, a.col_seq
						) t
					group by section_seq, row_seq, (col_seq - rn)
					) t
				where cnt >= #{cnt}
				order by section_seq, row_seq, col_seq
				) a, (SELECT @vsection_seq2:='', @rownum2:=0 FROM DUAL) b
			) t
		where rn = 1
    </select>
    
    <!-- 예약된 가족형 자리중에서 사용가능한 동산 정보 조회 -->
    <select id="getAvailableFamilyGraveInfo" parameterType="map" resultType="map">
    	SELECT
    		section_seq
    		,row_seq
			,min(col_seq) col_seq
		FROM TB_BUNYANG_GRAVE_ASSIGN a
		WHERE a.bunyang_seq = #{bunyangSeq}
		AND grave_type = #{graveType} 
		AND assign_status = 'RESERVED'
		GROUP BY section_seq, row_seq
    </select>
    
    <!-- 부부형 2기중에서 현재 사용중인 사용자 조회 -->
    <select id="getUsingCoupleUserSeq" parameterType="map" resultType="map">
    	SELECT 
			a.use_user_seq1
		FROM TB_BUNYANG_GRAVE_ASSIGN a INNER JOIN TB_BUNYANG_REF_USER b 
		ON a.bunyang_seq = b.bunyang_seq AND a.couple_seq = b.couple_seq AND a.use_user_seq1 = b.user_seq AND b.couple_seq = #{coupleSeq} AND b.ref_type = 'USE_USER'
		WHERE a.bunyang_seq = #{bunyangSeq} 
		LIMIT 1
    </select>
    
    <!-- 분양신청번호에 해당하는 사용정보 조회 -->
    <select id="getBunyangSeqGraveInfo" parameterType="map" resultType="map">
    	SELECT 
			section_seq
			,row_seq
			,col_seq
			,bunyang_seq
			,use_user_seq1
			,use_user_seq2
			,assign_status
			,grave_type
		FROM TB_BUNYANG_GRAVE_ASSIGN a
		WHERE a.bunyang_seq = #{bunyangSeq}
		ORDER BY section_seq, row_seq, col_seq
    </select>
    
    <!-- 가족형의 다른가족 또는 부부형 배우자가 사용시 내 자리는 이미 정해져있기때문에 그자리가 있는지 조회함 -->
    <select id="getReservedGraveInfo" parameterType="map" resultType="map">
    	SELECT
    		a.*
    	FROM
    	(SELECT 
			section_seq
			,row_seq
			,col_seq
			,bunyang_seq
			,use_user_seq1
			,use_user_seq2
			,couple_seq
			,assign_status
			,grave_type
			,seq_no
			,concat(a.section_seq, '구역 ', a.row_seq, '행-', char(64+a.col_seq), '열') as grave_exp
			,(select count(1) from TB_BUNYANG_GRAVE_REQUEST_INFO gr where gr.section_seq = a.section_seq and gr.row_seq = a.row_seq and gr.col_seq = a.col_seq and gr.request_status = 'REQUESTED') request_count
		FROM TB_BUNYANG_GRAVE_ASSIGN a
		WHERE a.bunyang_seq = #{bunyangSeq}
		) a
		WHERE 1=1
		AND (
		case 
			when a.grave_type = 'SINGLE' and a.assign_status = 'RESERVED' then 1
			when a.grave_type = 'COUPLE' then
				case 
					when a.assign_status = 'RESERVED' then 1
					when a.assign_status = 'HALF_OCCUPIED' and a.couple_seq = #{coupleSeq} then 1 
					else 0 
				end
			else 0
		end
		) = 1
		AND a.request_count = 0
		AND a.assign_status IN ('RESERVED', 'HALF_OCCUPIED')
		ORDER BY section_seq, row_seq, col_seq
		LIMIT 1
    </select>
    
    <!-- 가족형의 다른가족 또는 부부형 배우자가 사용시 내 자리는 이미 정해져있기때문에 그자리가 있는지 조회함 -->
    <select id="getReservedGraveInfo2" parameterType="map" resultType="map">
    	SELECT
    		a.*
    	FROM
    	(SELECT 
			a.section_seq
			,a.row_seq
			,a.col_seq
			,a.bunyang_seq
			,a.use_user_seq1
			,a.use_user_seq2
			,a.couple_seq
			,a.assign_status
			,a.grave_type
			,a.seq_no
			,concat(a.section_seq, '구역 ', a.row_seq, '행-', char(64+a.col_seq), '열') as grave_exp
		FROM TB_BUNYANG_GRAVE_ASSIGN a 
		INNER JOIN TB_BUNYANG_GRAVE_REQUEST_INFO b 
		ON a.bunyang_seq = b.bunyang_seq AND a.section_seq = b.section_seq AND a.row_seq = b.row_seq AND a.col_seq = b.col_seq
		WHERE a.bunyang_seq = #{bunyangSeq} 
		AND b.use_user_seq = #{userSeq} 
		AND a.assign_status IN ('RESERVED', 'HALF_OCCUPIED')
		AND b.request_status = 'REQUESTED'
		) a
		ORDER BY section_seq, row_seq, col_seq
		LIMIT 1
    </select>
    
    <!-- 동산 배정 -->
    <update id="updateGrave" parameterType="map">
    	UPDATE TB_BUNYANG_GRAVE_ASSIGN a
			SET bunyang_seq = #{bunyangSeq},
			use_user_seq1 = #{useUserSeq1},
			use_user_seq2 = #{useUserSeq2},
			assign_status = #{assignStatus},
			couple_seq = #{coupleSeq},
			assign_date1 = case when #{useUserSeq1} is not null then CURRENT_TIMESTAMP else null end,
			assign_date2 = case when #{useUserSeq2} is not null then CURRENT_TIMESTAMP else null end
		WHERE a.section_seq = #{sectionSeq} 
		AND a.row_seq = #{rowSeq}
		AND a.col_seq = #{colSeq}
    </update>
    
    <!-- 동산 배정(부부형 두번째 자리 업데이트) -->
    <update id="updateCoupleGrave" parameterType="map">
    	UPDATE TB_BUNYANG_GRAVE_ASSIGN a
			SET use_user_seq2 = #{useUserSeq2}, assign_status = #{assignStatus}, assign_date2 = CURRENT_TIMESTAMP
		WHERE a.bunyang_seq = #{bunyangSeq} AND (a.use_user_seq1 = #{useUserSeq1} or a.couple_seq = #{coupleSeq})
    </update>
    
    <!-- 예약된 동산 자리 배정 상태로 업데이트 -->
    <update id="updateReservedGrave" parameterType="map">
    	UPDATE TB_BUNYANG_GRAVE_ASSIGN a
			SET use_user_seq1 = #{useUserSeq1}
			,assign_status = CASE WHEN grave_type = 'COUPLE' THEN 'HALF_OCCUPIED' ELSE 'OCCUPIED' END
			,couple_seq = #{coupleSeq}
			,assign_date1 = CURRENT_TIMESTAMP
		WHERE a.bunyang_seq = #{bunyangSeq} 
		AND a.assign_status = 'RESERVED'
		AND a.section_seq = #{sectionSeq} 
		AND a.row_seq = #{rowSeq}
		AND a.col_seq = #{colSeq}
    </update>
    
    <!-- 동산 배정 -->
    <update id="updateRequestGrave" parameterType="map">
    	UPDATE TB_BUNYANG_GRAVE_ASSIGN a
			SET bunyang_seq = #{bunyangSeq},
			group_seq = #{groupSeq},
			use_user_seq1 = #{useUserSeq1},
			assign_status = COALESCE(#{assignStatus}, CASE WHEN grave_type = 'COUPLE' THEN 'HALF_OCCUPIED' ELSE 'OCCUPIED' END),
			couple_seq = #{coupleSeq},
			assign_date1 = case when #{assignStatus} = 'RESERVED' THEN null else CURRENT_TIMESTAMP end
		WHERE a.section_seq = #{sectionSeq} 
		AND a.row_seq = #{rowSeq}
		AND a.col_seq = #{colSeq}
    </update>
    
    <!-- 신청 동산 정보 clear -->
    <update id="clearRequestGrave" parameterType="map">
    	UPDATE TB_BUNYANG_GRAVE_ASSIGN a
			SET bunyang_seq = null,
			GROUP_SEQ = null,
			USE_USER_SEQ1 = null,
			USE_USER_SEQ2 = null,
			ASSIGN_STATUS = 'AVAILABLE',
			COUPLE_SEQ = null,
			ASSIGN_DATE1 = null,
			ASSIGN_DATE2 = null
		WHERE a.assign_status = 'REQUESTED'
		AND a.section_seq = #{sectionSeq} 
		AND a.row_seq = #{rowSeq}
		AND a.col_seq = #{colSeq}
    </update>
    
    <!-- 동산 신청 정보 저장 -->
    <update id="updateGraveRequestInfo" parameterType="map">
    	UPDATE TB_BUNYANG_GRAVE_ASSIGN a
			SET group_seq = #{groupSeq},
			bunyang_seq = #{bunyangSeq},
			use_user_seq1 = #{useUserSeq1},
			use_user_seq2 = #{useUserSeq2},
			couple_seq = #{coupleSeq},
			assign_status = #{assignStatus}
		WHERE a.section_seq = #{sectionSeq} 
		AND a.row_seq = #{rowSeq}
		AND a.col_seq = #{colSeq}
    </update>
    
    <!-- 동산 신청 정보 저장 -->
    <update id="approvalGraveRequestInfo" parameterType="map">
    	UPDATE TB_BUNYANG_GRAVE_REQUEST_INFO a
			SET request_status = 'APPROVAL'
			,APPROVAL_USER = #{approvalUser}
			,APPROVAL_DATE = CURRENT_TIMESTAMP
		WHERE a.bunyang_seq = #{bunyangSeq} 
		AND a.use_user_seq = #{useUserSeq}
    </update>
    
    <!-- 동산 신청 정보 저장 -->
    <insert id="createGraveRequestInfo" parameterType="map">
    	INSERT INTO TB_BUNYANG_GRAVE_REQUEST_INFO(
    	BUNYANG_SEQ,
		SECTION_SEQ,
		ROW_SEQ,
		COL_SEQ,
		USE_USER_SEQ,
		REQUEST_STATUS,
		REQUEST_USER,
		REQUEST_DATE
		)
		VALUES
		(
		#{bunyangSeq},
		#{sectionSeq},
		#{rowSeq},
		#{colSeq},
		#{useUserSeq},
		'REQUESTED',
		#{requestUser},
		CURRENT_TIMESTAMP
		)
    </insert>
    
    <!-- 동산 신청 정보 삭제 -->
    <delete id="deleteGraveRequestInfo" parameterType="map">
    	DELETE FROM TB_BUNYANG_GRAVE_REQUEST_INFO 
    	WHERE BUNYANG_SEQ = #{bunyangSeq}
    	AND SECTION_SEQ = #{sectionSeq}
    	AND ROW_SEQ = #{rowSeq}
    	AND COL_SEQ = #{colSeq}
    	AND USE_USER_SEQ = #{useUserSeq}
    	AND REQUEST_STATUS = 'REQUESTED'
    </delete>
    
    <select id="getFamilyGraveRequestInfo" parameterType="map" resultType="map">
    	SELECT
    		b.bunyang_seq
    		,b.use_user_seq1
    	FROM vw_bunyang_connect_info a INNER JOIN TB_BUNYANG_GRAVE_ASSIGN b on ((a.group_seq is not null and a.group_seq = b.group_seq) or (a.group_seq is null and a.bunyang_seq = b.bunyang_seq))
    	WHERE a.bunyang_seq = #{bunyangSeq}
    	AND a.connect_product_type = 'FAMILY'
    	AND b.assign_status = 'REQUESTED'
    	AND b.use_user_seq1 is not null
    	ORDER BY b.use_user_seq1
    	LIMIT 1
    </select>
    
    <select id="getGraveRequestList" parameterType="map" resultType="map">
    	 SELECT
        	a.bunyang_seq
        	,a.use_user_seq
        	,a.approval_user
        	,COALESCE((select user_name from TB_COM_USER cu where cu.user_id = a.approval_user), a.approval_user) as approval_user_name
        	,DATE_FORMAT(a.approval_date, '%Y-%m-%d') approval_date
            ,b.bunyang_no
            ,c.user_id
            ,c.user_name
            ,c.couple_seq
            ,DATE_FORMAT(a.request_date, '%Y-%m-%d') request_date
			,a.request_status
            ,case 
            	when a.request_status = 'REQUESTED' then '승인대기'
                when a.request_status = 'APPROVAL' then '승인완료'
            end as request_status_exp
            ,d.section_seq as request_section_seq
            ,d.row_seq as request_row_seq
            ,d.col_seq as request_col_seq
            ,d.seq_no as request_seq_no
            ,concat(d.section_seq, '구역 ', d.row_seq, '행-', char(64+d.col_seq), '열') as request_grave
            ,e.section_seq as approval_section_seq
            ,e.row_seq as approval_row_seq
            ,e.col_seq as approval_col_seq
            ,e.seq_no as approval_seq_no
            ,concat(e.section_seq, '구역 ', e.row_seq, '행-', char(64+e.col_seq), '열') as approval_grave
            ,DATE_FORMAT(
            case 
            	when a.use_user_seq = e.use_user_seq1 then e.assign_date1
                when a.use_user_seq = e.use_user_seq2 then e.assign_date2
            end, '%Y-%m-%d') as assign_date
        FROM TB_BUNYANG_GRAVE_REQUEST_INFO a INNER JOIN TB_BUNYANG_INFO b on a.BUNYANG_SEQ = b.BUNYANG_SEQ
        INNER JOIN TB_BUNYANG_REF_USER c on c.BUNYANG_SEQ = a.BUNYANG_SEQ and c.user_seq = a.use_user_seq and c.ref_type = 'USE_USER'
        INNER JOIN TB_BUNYANG_GRAVE_ASSIGN d on a.SECTION_SEQ = d.SECTION_SEQ and a.ROW_SEQ = d.ROW_SEQ and a.COL_SEQ = d.COL_SEQ
        LEFT OUTER JOIN TB_BUNYANG_GRAVE_ASSIGN e on a.BUNYANG_SEQ = e.BUNYANG_SEQ AND ((a.USE_USER_SEQ = e.USE_USER_SEQ1 AND e.assign_date1 is not null) or (a.USE_USER_SEQ = e.USE_USER_SEQ2 AND e.assign_date2 is not null))
        WHERE 1=1
        <if test="requestStatus != null and requestStatus != ''">
		AND a.request_status = #{requestStatus}
		</if>
        <if test="userName != null and userName != ''">
		AND c.user_name like concat('%',#{userName},'%')
		</if>
        ORDER BY CASE WHEN request_status = 'REQUESTED' then 1 else 2 end, request_date desc, b.bunyang_no
        <if test="start != null">
		LIMIT #{start}, #{count}
		</if>
    </select>
    
    <select id="getApprovalGraveList" parameterType="map" resultType="map">
    	 select 
        	a.section_seq
			,a.row_seq
			,a.col_seq
			,a.group_seq
			,a.bunyang_seq
			,a.use_user_seq1
			,a.use_user_seq2
			,a.assign_status
			,a.grave_type
			,a.seq_no
			,concat(a.section_seq, '구역 ', a.row_seq, '행-', char(64+a.col_seq), '열') as grave_exp
        from TB_BUNYANG_GRAVE_ASSIGN a INNER JOIN vw_bunyang_connect_info b ON (a.group_seq is not null and a.group_seq = b.group_seq) or (a.group_seq is null and a.bunyang_seq = b.bunyang_seq)
        where b.BUNYANG_SEQ = #{bunyangSeq} 
        AND a.ASSIGN_STATUS = 'REQUESTED'
        AND (case when b.connect_product_type = 'FAMILY' THEN 1 else case when a.USE_USER_SEQ1 = #{userSeq} then 1 else 0 end end) = 1
    </select>
    
    <select id="checkAvaliableGrave" parameterType="map" resultType="map">
    	 select 
        	count(1) as cnt
        from TB_BUNYANG_GRAVE_ASSIGN a
        where a.bunyang_seq = #{bunyangSeq}
         <if test="assignStatus == 'HALF_OCCUPIED'">
		AND a.couple_seq = #{coupleSeq}
		</if>
        AND a.section_seq = #{sectionSeq} 
		AND a.row_seq = #{rowSeq}
		AND a.col_seq = #{colSeq}
		AND a.assign_status = #{assignStatus}
    </select>
    
    <select id="checkApprovalStatus" parameterType="map" resultType="map">
    	 select 
        	count(1) as cnt
        from TB_BUNYANG_GRAVE_REQUEST_INFO a
        where a.bunyang_seq = #{bunyangSeq}
        AND a.use_user_seq = #{userSeq} 
		AND a.request_status = 'REQUESTED'
    </select>
    
    <select id="getNotApprovalGraveList" parameterType="map" resultType="map">
    	<![CDATA[
		SELECT
        	a.bunyang_seq
        	,a.use_user_seq
            ,b.bunyang_no
            ,c.user_id
            ,c.user_name
            ,c.couple_seq
            ,DATE_FORMAT(a.request_date, '%Y-%m-%d') request_date
            ,d.section_seq
            ,d.row_seq
            ,d.col_seq
            ,d.seq_no
            ,d.assign_status
            ,b.product_type
        FROM TB_BUNYANG_GRAVE_REQUEST_INFO a INNER JOIN TB_BUNYANG_INFO b on a.BUNYANG_SEQ = b.BUNYANG_SEQ
        INNER JOIN TB_BUNYANG_REF_USER c on c.BUNYANG_SEQ = a.BUNYANG_SEQ and c.user_seq = a.use_user_seq and c.ref_type = 'USE_USER'
        INNER JOIN TB_BUNYANG_GRAVE_ASSIGN d on a.SECTION_SEQ = d.SECTION_SEQ and a.ROW_SEQ = d.ROW_SEQ and a.COL_SEQ = d.COL_SEQ
        WHERE a.request_date < DATE_ADD(CURRENT_TIMESTAMP(), interval -1 hour) 
    	and a.REQUEST_STATUS = 'REQUESTED'
    	ORDER BY a.request_date, b.bunyang_no
		]]>
    </select>
    
    <select id="getFamilyRequestGraveList" parameterType="map" resultType="map">
    	SELECT
        	a.section_seq
        	,a.row_seq
        	,a.col_seq
        	,a.seq_no
        FROM TB_BUNYANG_GRAVE_ASSIGN a
        WHERE a.bunyang_seq = #{bunyangSeq}
        AND a.assign_status = 'REQUESTED'
        AND a.use_user_seq1 is null
        AND a.use_user_seq2 is null
    </select>
    
     <!-- 동산 위치 변경 -->
    <update id="changeGrave" parameterType="map">
    	UPDATE TB_BUNYANG_GRAVE_ASSIGN a
			SET
			group_seq =  #{group_seq},
			bunyang_seq = #{bunyang_seq},
			use_user_seq1 = #{use_user_seq1},
			use_user_seq2 = #{use_user_seq2},
			assign_status = #{assign_status},
			couple_seq = #{couple_seq},
			assign_date1 = case when #{use_user_seq1} is not null then CURRENT_TIMESTAMP else null end,
			assign_date2 = case when #{use_user_seq2} is not null then CURRENT_TIMESTAMP else null end
		WHERE a.section_seq = #{section_seq} 
		AND a.row_seq = #{row_seq}
		AND a.col_seq = #{col_seq}
    </update>
    
    <!-- 동산 위치 변경전 정보를 Avaliable 상태로 업데이트 -->
    <update id="changeGraveToAvaliable" parameterType="map">
    	UPDATE TB_BUNYANG_GRAVE_ASSIGN a
			SET
			group_seq = null, 
			bunyang_seq = null,
			use_user_seq1 = null,
			use_user_seq2 = null,
			assign_status = 'AVAILABLE',
			couple_seq = null,
			assign_date1 = null,
			assign_date2 = null
		WHERE a.section_seq = #{section_seq} 
		AND a.row_seq = #{row_seq}
		AND a.col_seq = #{col_seq}
    </update>
    
    <!-- 동산 위치 변경시 승인되지 않은 신청 정보가 있을 경우 같이 업데이트해줌 -->
    <update id="changeGraveRequestInfo" parameterType="map">
    	UPDATE TB_BUNYANG_GRAVE_REQUEST_INFO a
			SET 
			section_seq = #{section_seq}
			,row_seq = #{row_seq}
			,col_seq = #{col_seq}
			,request_status = 'APPROVAL'
			,APPROVAL_USER = #{approval_user}
			,APPROVAL_DATE = CURRENT_TIMESTAMP
		WHERE a.bunyang_seq = #{bunyang_seq} 
		AND a.use_user_seq = #{use_user_seq}
		AND a.request_status = 'REQUESTED' 
    </update>
    
    
</mapper>