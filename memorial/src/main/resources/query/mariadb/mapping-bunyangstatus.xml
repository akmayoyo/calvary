<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="bunyangstatus">


    <!-- 장묘형태별 신청현황조회 -->
    <select id="getStatusByGraveType" parameterType="map" resultType="map">
    	SELECT
			t1.couple_cnt
		    ,t1.single_cnt
		    ,t2.total_couple_cnt
		    ,t2.total_single_cnt
		    ,case when t2.total_couple_cnt = 0 then null else round(t1.couple_cnt/t2.total_couple_cnt * 100,1) end couple_usage
		    ,case when t2.total_single_cnt = 0 then null else round(t1.single_cnt/t2.total_single_cnt * 100,1) end single_usage
		FROM
		(SELECT
			sum(couple_type_count) as  couple_cnt
		    ,sum(single_type_count) as single_cnt
		FROM TB_BUNYANG_INFO a
		WHERE a.progress_status not in ('E', 'R') AND (a.cancel_yn is null or a.cancel_yn = 'N')
		) t1,
		(SELECT
			sum(case when product_type = 'COUPLE' then 1 else 0 end) as total_couple_cnt
		    ,sum(case when product_type = 'SINGLE' then 1 else 0 end) as total_single_cnt
		from TB_BUNYANG_GRAVE_ASSIGN a
		) t2
    </select>
    
    <!-- 개별형/가족형 별 신청현황조회 -->
    <select id="getStatusByProductType" parameterType="map" resultType="map">
    	SELECT 
			sum(case when product_type = 'EACH' then 1 else 0 end) each_cnt
		    ,sum(case when product_type = 'FAMILY' then 1 else 0 end) family_cnt 
		FROM TB_BUNYANG_INFO a
		WHERE a.progress_status not in ('E', 'R') AND (a.cancel_yn is null or a.cancel_yn = 'N')
    </select>
    
    <!-- 진행상태 별 신청현황조회 -->
    <select id="getStatusByProgress" parameterType="map" resultType="map">
    	SELECT
			max(case when progress_status = 'B' then cnt end) contract_cnt
		    ,max(case when progress_status = 'C' then cnt end) fullpayment_cnt
		from
		(select 
			count(distinct bunyang_seq) cnt, progress_status 
		from TB_BUNYANG_HISTORY b 
		where progress_status = 'B'
		AND EXISTS(select 1 from TB_BUNYANG_INFO bi WHERE bi.bunyang_seq = b.bunyang_seq AND bi.progress_status not in ('E', 'R') AND (bi.cancel_yn is null or bi.cancel_yn = 'N'))
		union ALL
		select 
			count(distinct bunyang_seq) cnt, progress_status
		from TB_BUNYANG_HISTORY b
		where progress_status = 'C'
		AND EXISTS(select 1 from TB_BUNYANG_INFO bi WHERE bi.bunyang_seq = b.bunyang_seq AND bi.progress_status not in ('E', 'R') AND (bi.cancel_yn is null or bi.cancel_yn = 'N')) 
		) t
    </select>
    
    <!-- 납부현황조회 -->
    <select id="getPaymentStatus" parameterType="map" resultType="map">
    	SELECT
			t1.total_price
			,t2.total_payment
			,case when t1.total_price = 0 then null else round(t2.total_payment/t1.total_price*100,1) end as payment_rate
		from
		(select 
			sum((COALESCE(a.couple_type_count,0)*2 + COALESCE(a.single_type_count,0)) * COALESCE((select code_value from TB_COM_CODE where parent_code_seq = 'BUNYANG_TIMES' and code_seq = a.bunyang_times), a.price_per_count)) as total_price 
		from TB_BUNYANG_INFO a 
		where a.PROGRESS_STATUS not in('E', 'R') AND (a.cancel_yn is null or a.cancel_yn = 'N')
		) t1,
		(SELECT
			sum(payment_amount) total_payment
		from TB_BUNYANG_PAYMENT_HISTORY a
		where a.PAYMENT_TYPE in('DOWN_PAYMENT','BALANCE_PAYMENT')
		and a.BUNYANG_SEQ in(select BUNYANG_SEQ from TB_BUNYANG_INFO a where a.PROGRESS_STATUS not in('E', 'R'))
		) t2
    </select>
    
    <!-- 관리비납부현황조회 -->
    <select id="getMaintPaymentStatus" parameterType="map" resultType="map">
    	SELECT
			sum(total_price) total_price
		    ,sum(total_payment) total_payment
		    ,sum(case when total_cnt = payment_cnt then 1 else 0 end) as full_payment_cnt
		    ,sum(case when payment_cnt = 0 then 1 else 0 end) non_payment_cnt
		    ,sum(case when payment_cnt > 0 AND not_payment_cnt > 0 then 1 else 0 end) partial_payment_cnt
		FROM
		(SELECT
			bunyang_seq
			,sum(payment_price) total_price
		    ,sum(case when payment_yn = 'Y' then payment_price else 0 end) total_payment
		    ,count(1) total_cnt
		    ,sum(case when payment_yn = 'Y' then 1 else 0 end) payment_cnt
		    ,sum(case when payment_yn = 'N' then 1 else 0 end) not_payment_cnt
		from TB_BUNYANG_MAINT_PAYMENT_INFO a
		where 1=1
		<if test="maintYear != null and maintYear > 0">
		and maint_year = #{maintYear} 
		</if>
		and exists(select 1 from TB_BUNYANG_REF_USER ru where ru.ref_type = 'USE_USER' and ru.bunyang_seq = a.bunyang_seq and ru.user_seq = a.user_seq and ru.cancel_seq is null)
		group by bunyang_seq
		) t
    </select>
    
    <!-- 관리비 납부 연도 조회(2018~최신연도) -->
    <select id="getMaintYearList" parameterType="map" resultType="map">
    	<![CDATA[
	    select 
			year(curdate()) - seq + 1 as yearval 
		from seq_1_to_1000
		where seq <= (year(curdate()) - 2018 + 1)
		order by yearval desc
		]]>
    </select>
    
    <!-- 관리비납부현황조회 -->
    <select id="getMaintPaymentList" parameterType="map" resultType="map">
    	SELECT
    		t.*
    		,case 
    			when payment_cnt = total_cnt then '완납'
    			when payment_cnt = 0 then '미납'
    			when payment_cnt > 0 AND not_payment_cnt > 0 then '부분납부'
    		end maint_status_exp
    	FROM
    	(SELECT
			t2.bunyang_seq
		    ,t2.bunyang_no
		    ,t3.user_name as apply_user_name
		    ,t1.total_price
		    ,t1.total_payment
			,t1.total_cnt
			,t1.payment_cnt
		    ,t1.not_payment_cnt
		    ,(SELECT DATE_FORMAT(update_date, '%Y-%m-%d') FROM TB_BUNYANG_HISTORY bh WHERE bh.bunyang_seq = t1.bunyang_seq and bh.progress_status = 'D') use_approval_date
		    ,CASE 
        		WHEN t4.cnt > 1 THEN CONCAT(t4.user_name,'(',t4.relation_type_name,')',' 외 ',t4.cnt-1,'명')
          		ELSE  CONCAT(t4.user_name,'(',t4.relation_type_name,')')
        	END use_user_exp
		FROM
		(SELECT
			a.bunyang_seq
		    ,sum(payment_price) total_price
		    ,sum(case when payment_yn = 'Y' then payment_price else 0 end) total_payment
		    ,count(1) total_cnt
		    ,sum(case when payment_yn = 'Y' then 1 else 0 end) payment_cnt
		    ,sum(case when payment_yn = 'N' then 1 else 0 end) not_payment_cnt
		from TB_BUNYANG_MAINT_PAYMENT_INFO a
		where 1=1
		<if test="maintYear != null and maintYear > 0">
		and maint_year = #{maintYear} 
		</if>
		and exists(select 1 from TB_BUNYANG_REF_USER ru where ru.ref_type = 'USE_USER' and ru.bunyang_seq = a.bunyang_seq and ru.user_seq = a.user_seq and ru.cancel_seq is null)
		group by a.bunyang_seq
		) t1 
		inner join TB_BUNYANG_INFO t2 on t1.bunyang_seq = t2.bunyang_seq AND t2.progress_status not in ('E', 'R') AND (t2.cancel_yn is null or t2.cancel_yn != 'Y')
		inner join TB_BUNYANG_REF_USER t3 on t1.bunyang_seq = t3.bunyang_seq AND t3.ref_type = 'APPLY_USER'
		inner join
			(SELECT
				*
				,(SELECT COUNT(*) FROM TB_BUNYANG_REF_USER RU WHERE RU.bunyang_seq = t.bunyang_seq and RU.ref_type = 'USE_USER') cnt
				,(SELECT code_name FROM TB_COM_RELATION_CODE cc WHERE cc.code_seq = t.relation_type) relation_type_name
			FROM
				(SELECT
					bunyang_seq
				  	,user_id
					,user_name
					,relation_type
					,CASE WHEN @vbunyang_seq = a.bunyang_seq THEN @rownum:=@rownum+1 ELSE @rownum:=1 END rn
                    ,(@vbunyang_seq := a.bunyang_seq) vbunyang_seq
				FROM      
					(SELECT 
						 bunyang_seq
					   	,user_id
					   	,user_name
					   	,relation_type 
					FROM TB_BUNYANG_REF_USER a
					WHERE a.ref_type = 'USE_USER'
					AND a.cancel_seq is null
					) a, (SELECT @vbunyang_seq:='', @rownum:=0 FROM DUAL) b
				ORDER BY bunyang_seq, CASE WHEN relation_type = 'ONESELF' THEN 1 ELSE 2 end, user_name
			  ) t
			  WHERE rn = 1
			) t4 ON t1.bunyang_seq = t4.bunyang_seq
		) t
		WHERE 1=1
		<if test="apply_user_name != null and apply_user_name != ''">
		AND apply_user_name like CONCAT('%',#{apply_user_name},'%')
		</if>
		<if test='maintStatus == "1"'>
		AND payment_cnt = total_cnt
		</if>
		<if test='maintStatus == "2"'>
		AND payment_cnt = 0
		</if>
		<if test='maintStatus == "3"'>
		<![CDATA[
		AND payment_cnt > 0 AND not_payment_cnt > 0
		]]>
		</if>
		ORDER BY t.bunyang_no
		<if test="start != null">
		LIMIT #{start}, #{count}
		</if>
    </select>
    
    <!-- 관리비 납부/미납 상세정보 조회 -->
    <select id="getMaintPaymentDetailList" parameterType="map" resultType="map">
    	SELECT
			t1.maint_year
			,t1.maint_seq
		    ,t1.payment_price
		    ,date_format(t1.maint_start_date, '%Y-%m-%d') as maint_start_date
		    ,date_format(t1.maint_end_date, '%Y-%m-%d') as maint_end_date
		    ,CONCAT(date_format(t1.maint_start_date, '%Y-%m-%d'),' ~ ',date_format(t1.maint_end_date, '%Y-%m-%d')) as maint_period
		    ,t1.payment_type
		    ,CASE 
		    	WHEN t1.payment_type = 'BEFORE_USE' THEN '정기' 
		    	WHEN t1.payment_type = 'AFTER_USE' THEN '선납(30년)'
		    END as payment_type_name
		    ,t2.user_name
		    ,t2.birth_date
		    ,t2.relation_type
		    ,(SELECT code_name FROM TB_COM_RELATION_CODE cc WHERE cc.code_seq = t2.relation_type) relation_type_name
		    ,t2.mobile
		    ,t2.post_number
		    ,t2.address1
			,t2.address2
			,t3.user_name as apply_user_name
			,t4.bunyang_no
			,CASE 
				WHEN t4.service_charge_type = 'APPLY_USER' THEN t3.user_name
				WHEN t4.service_charge_type = 'USE_USER' THEN t2.user_name
				WHEN t4.service_charge_type = 'REPRESENT' THEN (select user_name from TB_BUNYANG_REF_USER ru WHERE ru.bunyang_seq = t1.bunyang_seq AND ru.ref_type = 'USE_USER' AND ru.is_maint_charger = 'Y')
			END charger_name
			,CASE 
				WHEN t4.service_charge_type = 'APPLY_USER' THEN t3.mobile
				WHEN t4.service_charge_type = 'USE_USER' THEN t2.mobile
				WHEN t4.service_charge_type = 'REPRESENT' THEN (select mobile from TB_BUNYANG_REF_USER ru WHERE ru.bunyang_seq = t1.bunyang_seq AND ru.ref_type = 'USE_USER' AND ru.is_maint_charger = 'Y')
			END charger_phone
			,CASE 
				WHEN t4.service_charge_type = 'APPLY_USER' THEN CONCAT('(', t3.post_number, ')', t3.address1, COALESCE(t3.address2, ''))
				WHEN t4.service_charge_type = 'USE_USER' THEN CONCAT('(', t2.post_number, ')', t2.address1, COALESCE(t2.address2, ''))
				WHEN t4.service_charge_type = 'REPRESENT' THEN (select CONCAT('(', post_number, ')', address1, COALESCE(address2, '')) from TB_BUNYANG_REF_USER ru WHERE ru.bunyang_seq = t1.bunyang_seq AND ru.ref_type = 'USE_USER' AND ru.is_maint_charger = 'Y')
			END charger_address
		FROM TB_BUNYANG_MAINT_PAYMENT_INFO t1 
		INNER JOIN TB_BUNYANG_REF_USER t2 ON t1.bunyang_seq = t2.bunyang_seq AND t1.user_seq = t2.user_seq AND t2.ref_type = 'USE_USER'
		INNER JOIN TB_BUNYANG_REF_USER t3 ON t1.bunyang_seq = t3.bunyang_seq AND t3.ref_type = 'APPLY_USER'
		INNER JOIN TB_BUNYANG_INFO t4 ON t1.bunyang_seq = t4.bunyang_seq
		WHERE 1=1
		and exists(select 1 from TB_BUNYANG_REF_USER ru where ru.ref_type = 'USE_USER' and ru.bunyang_seq = t1.bunyang_seq and ru.user_seq = t1.user_seq and ru.cancel_seq is null)
		and t4.progress_status not in ('E', 'R') AND (t4.cancel_yn is null or t4.cancel_yn != 'Y')
		<if test="bunyangSeq != null and bunyangSeq != ''">
		AND t1.bunyang_seq = #{bunyangSeq}
		</if>
		<if test="maintYear != null and maintYear > 0">
		AND t1.maint_year = #{maintYear} 
		</if>
		AND t1.payment_yn = #{paymentYn}
		ORDER BY t4.bunyang_no, t1.maint_year, t1.user_seq
		<if test="start != null">
		LIMIT #{start}, #{count}
		</if>
    </select>
    
    <!-- 관리비 납부대상 리스트 조회 -->
    <select id="getUnpaidMaintPaymentList" parameterType="map" resultType="map">
    	SELECT
        	bunyang_seq
        	,bunyang_no
        	,(select user_name from TB_BUNYANG_REF_USER ru WHERE ru.bunyang_seq = t.bunyang_seq AND ru.ref_type = 'APPLY_USER') as apply_user_name
        	,service_charge_type
        	,(select code_name from TB_COM_CODE cc WHERE cc.parent_code_seq = 'SERVICE_CHARGE_TYPE' AND cc.code_seq = t.service_charge_type) as service_charge_type_name
        	,user_id as charger_id
        	,user_name as charger_name
        	,mobile as charger_phone
        	,address as charger_address
            ,sum(payment_price) as total_unpaid_price
            ,count(1) as total_unpaid_cnt
 		FROM
        (SELECT
        	t1.bunyang_seq
			,t1.bunyang_no
            ,t1.service_charge_type
            ,t2.payment_price
            ,t3.user_id
            ,t3.user_name
			,t3.mobile
            ,concat('(', t3.post_number, ')', t3.address1, coalesce(t3.address2, '')) address
		FROM TB_BUNYANG_INFO t1 INNER JOIN TB_BUNYANG_MAINT_PAYMENT_INFO t2 ON t1.bunyang_seq = t2.bunyang_seq
        INNER JOIN TB_BUNYANG_REF_USER t3 ON t1.bunyang_seq = t3.bunyang_seq
        WHERE t2.payment_yn = 'N' AND t1.service_charge_type = 'APPLY_USER' AND t3.ref_type = 'APPLY_USER'
        UNION ALL
		SELECT
        	t1.bunyang_seq
			,t1.bunyang_no
            ,t1.service_charge_type
            ,t2.payment_price
            ,t3.user_id
            ,t3.user_name
			,t3.mobile
            ,concat('(', t3.post_number, ')', t3.address1, coalesce(t3.address2, '')) address
		FROM TB_BUNYANG_INFO t1 INNER JOIN TB_BUNYANG_MAINT_PAYMENT_INFO t2 ON t1.bunyang_seq = t2.bunyang_seq
        INNER JOIN TB_BUNYANG_REF_USER t3 ON t1.bunyang_seq = t3.bunyang_seq AND t2.user_seq = t3.user_seq
        WHERE t2.payment_yn = 'N' AND t1.service_charge_type = 'USE_USER' AND t3.ref_type = 'USE_USER'
        UNION ALL
		SELECT
        	t1.bunyang_seq
			,t1.bunyang_no
            ,t1.service_charge_type
            ,t2.payment_price
            ,t3.user_id
            ,t3.user_name
			,t3.mobile
            ,concat('(', t3.post_number, ')', t3.address1, coalesce(t3.address2, '')) address
		FROM TB_BUNYANG_INFO t1 INNER JOIN TB_BUNYANG_MAINT_PAYMENT_INFO t2 ON t1.bunyang_seq = t2.bunyang_seq
        INNER JOIN TB_BUNYANG_REF_USER t3 ON t1.bunyang_seq = t3.bunyang_seq
        WHERE t2.payment_yn = 'N' AND t1.service_charge_type = 'REPRESENT' AND t3.ref_type = 'USE_USER' AND t3.is_maint_charger = 'Y'
        ) t
        GROUP BY bunyang_seq, bunyang_no, service_charge_type, user_id, user_name, mobile, address
        ORDER BY bunyang_no, user_name
        <if test="start != null">
		LIMIT #{start}, #{count}
		</if>
    </select>
    
    <!-- 입출금 현황 조회 -->
    <select id="getBankStatusList" parameterType="map" resultType="map">
    	SELECT
    		t.*
    	FROM
    	(SELECT
    		year(payment_date) as year
    		,sum(case when payment_division = 'deposit' then payment_amount else 0 end) as deposit_amount
    		,sum(case when payment_division = 'withdrawal' then payment_amount else 0 end) as withdrawal_amount
    	FROM TB_BUNYANG_PAYMENT_HISTORY
    	GROUP BY YEAR(payment_date)
    	ORDER BY YEAR(payment_date)
    	) t
    	UNION ALL
        SELECT
    		'All' as year
    		,sum(case when payment_division = 'deposit' then payment_amount else 0 end) as deposit_amount
    		,sum(case when payment_division = 'withdrawal' then payment_amount else 0 end) as withdrawal_amount
    	FROM TB_BUNYANG_PAYMENT_HISTORY
    </select>
    
    <!-- 추모동산 사용현황 조회 -->
    <select id="getGraveStatusList" parameterType="map" resultType="map">
    	select
         t.*
        from
        (select 
        	grave_type
        	,section_seq
            ,sum(case when assign_status = 'AVAILABLE' then 2 else 0 end) available_cnt
            ,sum(case when assign_status = 'RESERVED' then 2 when assign_status = 'HALF_OCCUPIED' then 1 else 0 end) reserved_cnt
            ,sum(case when assign_status = 'OCCUPIED' then 2 when assign_status = 'HALF_OCCUPIED' then 1 else 0 end) occupied_cnt
            ,count(1) * 2 total_cnt
        from TB_BUNYANG_GRAVE_ASSIGN a
        where grave_type = 'COUPLE'
        GROUP BY GRAVE_TYPE, SECTION_SEQ
        ORDER BY SECTION_SEQ
        ) t
        
        union all
        
        select 
        	'sub_total' as grave_type
        	,'sub_total' as section_seq
            ,sum(case when assign_status = 'AVAILABLE' then 2 else 0 end) available_cnt
            ,sum(case when assign_status = 'RESERVED' then 2 when assign_status = 'HALF_OCCUPIED' then 1 else 0 end) reserved_cnt
            ,sum(case when assign_status = 'OCCUPIED' then 2 when assign_status = 'HALF_OCCUPIED' then 1 else 0 end) occupied_cnt
            ,count(1) * 2 total_cnt
        from TB_BUNYANG_GRAVE_ASSIGN a
        where grave_type = 'COUPLE'
        
        union ALL
        
		select
         t.*
        from
        (select 
        	grave_type
        	,section_seq
            ,sum(case when assign_status = 'AVAILABLE' then 1 else 0 end) available_cnt
            ,sum(case when assign_status = 'RESERVED' then 1 else 0 end) reserved_cnt
            ,sum(case when assign_status = 'OCCUPIED' then 1 else 0 end) occupied_cnt
            ,count(1) total_cnt
        from TB_BUNYANG_GRAVE_ASSIGN a
        where grave_type = 'SINGLE'
        GROUP BY GRAVE_TYPE, SECTION_SEQ
        ORDER BY SECTION_SEQ
        ) t
        
        union all
        
        select 
        	'sub_total' as grave_type
        	,'sub_total' as section_seq
            ,sum(case when assign_status = 'AVAILABLE' then 1 else 0 end) available_cnt
            ,sum(case when assign_status = 'RESERVED' then 1 else 0 end) reserved_cnt
            ,sum(case when assign_status = 'OCCUPIED' then 1 else 0 end) occupied_cnt
            ,count(1) total_cnt
        from TB_BUNYANG_GRAVE_ASSIGN a
        where grave_type = 'SINGLE'
        
        UNION ALL
        
        select 
        	'total' as grave_type
        	,'total' as section_seq
            ,sum(case when grave_type = 'COUPLE' then 
            	case when assign_status = 'AVAILABLE' then 2 else 0 end
            else
            	case when assign_status = 'AVAILABLE' then 1 else 0 end
            end) available_cnt
            ,sum(case when grave_type = 'COUPLE' then 
            	case when assign_status = 'RESERVED' then 2 when assign_status = 'HALF_OCCUPIED' then 1 else 0 end
            else
            	case when assign_status = 'RESERVED' then 1 else 0 end
            end) reserved_cnt
            ,sum(case when grave_type = 'COUPLE' then 
            	case when assign_status = 'OCCUPIED' then 2 when assign_status = 'HALF_OCCUPIED' then 1 else 0 end
            else
            	case when assign_status = 'OCCUPIED' then 1 else 0 end
            end) occupied_cnt
            ,sum(case when grave_type = 'couple' then 2 else 1 end) total_cnt
        from TB_BUNYANG_GRAVE_ASSIGN a
    </select>
    
    <select id="getGraveUserInfo" parameterType="map" resultType="map">
    	SELECT
			t1.section_seq
		    ,t1.row_seq
		    ,t1.col_seq
		    ,t1.seq_no
		from TB_BUNYANG_GRAVE_ASSIGN t1
		inner join TB_BUNYANG_REF_USER t2 on t1.bunyang_seq = t2.bunyang_seq AND (t1.use_user_seq1 = t2.user_seq or t1.use_user_seq2 = t2.user_seq) AND t2.ref_type = 'USE_USER'
		where t2.user_name = #{userName}
		order by t1.section_seq, t1.row_seq, t1.col_seq
		LIMIT 0,1
    </select>

</mapper>